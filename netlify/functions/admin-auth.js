// netlify/functions/admin-auth.js
const admin = require('firebase-admin');
require('dotenv').config();

// Inisialisasi Firebase Admin SDK menggunakan variabel lingkungan
// Pastikan Anda telah mengonfigurasi FIREBASE_SERVICE_ACCOUNT_CONFIG
// dan FIREBASE_DATABASE_URL di Netlify.
if (!admin.apps.length) {
    const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT_CONFIG);
    admin.initializeApp({
        credential: admin.credential.cert(serviceAccount),
        databaseURL: process.env.FIREBASE_DATABASE_URL
    });
}

const db = admin.database();
const adminRef = db.ref('admin');

exports.handler = async (event, context) => {
    if (event.httpMethod !== 'POST') {
        return {
            statusCode: 405,
            body: JSON.stringify({ message: 'Method Not Allowed' }),
        };
    }

    try {
        const { action, username, password } = JSON.parse(event.body);

        switch (action) {
            case 'login':
                const snapshot = await adminRef.orderByChild('username').equalTo(username).once('value');
                if (snapshot.exists()) {
                    const adminData = snapshot.val();
                    const userId = Object.keys(adminData)[0];
                    const user = adminData[userId];

                    // !!! PENTING: Dalam aplikasi nyata, bandingkan hash password, bukan plain text !!!
                    if (user.password === password) {
                        if (user.admin === "acc") {
                            return {
                                statusCode: 200,
                                body: JSON.stringify({
                                    status: 'success',
                                    user: {
                                        id: user.id,
                                        username: user.username,
                                        adminStatus: user.admin
                                    }
                                }),
                            };
                        } else {
                            return {
                                statusCode: 403, // Forbidden
                                body: JSON.stringify({ message: 'Akun Anda sedang menunggu persetujuan atau telah ditolak oleh admin.' }),
                            };
                        }
                    } else {
                        return {
                            statusCode: 401, // Unauthorized
                            body: JSON.stringify({ message: 'Nama pengguna atau kata sandi tidak valid.' }),
                        };
                    }
                } else {
                    return {
                        statusCode: 401, // Unauthorized
                        body: JSON.stringify({ message: 'Nama pengguna atau kata sandi tidak valid.' }),
                    };
                }

            case 'register':
                // Check if username already exists
                const existingUserSnapshot = await adminRef.orderByChild('username').equalTo(username).once('value');
                if (existingUserSnapshot.exists()) {
                    return {
                        statusCode: 409, // Conflict
                        body: JSON.stringify({ message: 'Nama pengguna sudah terdaftar.' }),
                    };
                }

                // Get a new unique ID (Firebase push key is good for this)
                const newAdminRef = adminRef.push();
                const newUserId = newAdminRef.key; // Get the unique ID generated by push()

                // Save new user with initial 'not' status
                const newUserData = {
                    id: newUserId, // Store the generated ID
                    username: username,
                    password: password, // !!! PENTING: Hash password ini sebelum menyimpannya di Production !!!
                    admin: 'not' // Default to pending
                };
                await newAdminRef.set(newUserData);

                return {
                    statusCode: 201, // Created
                    body: JSON.stringify({
                        status: 'success',
                        message: 'Pendaftaran berhasil. Silakan tunggu persetujuan dari admin.',
                        user: { id: newUserId, username: username, adminStatus: 'not' }
                    }),
                };

            default:
                return {
                    statusCode: 400,
                    body: JSON.stringify({ message: 'Invalid action' }),
                };
        }
    } catch (error) {
        console.error('Admin Auth function error:', error);
        return {
            statusCode: 500,
            body: JSON.stringify({ message: 'Internal Server Error', error: error.message }),
        };
    }
};